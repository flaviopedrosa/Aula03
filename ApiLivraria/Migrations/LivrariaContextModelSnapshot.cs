// <auto-generated />
using System;
using ApiLivraria.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ApiLivraria.Migrations
{
    [DbContext(typeof(LivrariaContext))]
    partial class LivrariaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApiLivraria.Models.Autor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Autores");
                });

            modelBuilder.Entity("ApiLivraria.Models.AutorLivro", b =>
                {
                    b.Property<Guid>("AutorId");

                    b.Property<Guid>("LivroId");

                    b.Property<string>("LivroIsbn");

                    b.HasKey("AutorId", "LivroId");

                    b.HasIndex("LivroIsbn");

                    b.ToTable("AutorLivro");
                });

            modelBuilder.Entity("ApiLivraria.Models.CarrinhoCompra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AutorId");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.ToTable("CarrinhosCompras");
                });

            modelBuilder.Entity("ApiLivraria.Models.Comentario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<string>("LivroIsbn")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("LivroIsbn");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("ApiLivraria.Models.Entrega", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataEntrega");

                    b.Property<DateTime>("DataRetirada");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Entregas");
                });

            modelBuilder.Entity("ApiLivraria.Models.Livro", b =>
                {
                    b.Property<string>("Isbn")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CarrinhoCompraId");

                    b.Property<Guid?>("EntregaId");

                    b.Property<Guid?>("PedidoId");

                    b.Property<string>("Prefacio")
                        .IsRequired();

                    b.Property<string>("Titulo")
                        .IsRequired();

                    b.HasKey("Isbn");

                    b.HasIndex("CarrinhoCompraId");

                    b.HasIndex("EntregaId");

                    b.HasIndex("PedidoId");

                    b.ToTable("Livros");
                });

            modelBuilder.Entity("ApiLivraria.Models.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataRetirada");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("ApiLivraria.Models.AutorLivro", b =>
                {
                    b.HasOne("ApiLivraria.Models.Autor", "Autor")
                        .WithMany("AutoresLivros")
                        .HasForeignKey("AutorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApiLivraria.Models.Livro", "Livro")
                        .WithMany("AutoresLivros")
                        .HasForeignKey("LivroIsbn");
                });

            modelBuilder.Entity("ApiLivraria.Models.CarrinhoCompra", b =>
                {
                    b.HasOne("ApiLivraria.Models.Autor")
                        .WithMany("CarrinhosCompras")
                        .HasForeignKey("AutorId");
                });

            modelBuilder.Entity("ApiLivraria.Models.Comentario", b =>
                {
                    b.HasOne("ApiLivraria.Models.Livro", "Livro")
                        .WithMany("Comentarios")
                        .HasForeignKey("LivroIsbn")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApiLivraria.Models.Livro", b =>
                {
                    b.HasOne("ApiLivraria.Models.CarrinhoCompra")
                        .WithMany("Livros")
                        .HasForeignKey("CarrinhoCompraId");

                    b.HasOne("ApiLivraria.Models.Entrega")
                        .WithMany("Livros")
                        .HasForeignKey("EntregaId");

                    b.HasOne("ApiLivraria.Models.Pedido")
                        .WithMany("Livros")
                        .HasForeignKey("PedidoId");
                });
#pragma warning restore 612, 618
        }
    }
}
